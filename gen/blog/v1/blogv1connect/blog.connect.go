// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: blog/v1/blog.proto

package blogv1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1 "github.com/Niket1997/blogger/gen/blog/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// BlogServiceName is the fully-qualified name of the BlogService service.
	BlogServiceName = "blog.v1.BlogService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BlogServiceCreateProcedure is the fully-qualified name of the BlogService's create RPC.
	BlogServiceCreateProcedure = "/blog.v1.BlogService/create"
	// BlogServiceGetProcedure is the fully-qualified name of the BlogService's get RPC.
	BlogServiceGetProcedure = "/blog.v1.BlogService/get"
)

// BlogServiceClient is a client for the blog.v1.BlogService service.
type BlogServiceClient interface {
	Create(context.Context, *connect.Request[v1.CreateBlogRequest]) (*connect.Response[v1.BlogResponse], error)
	Get(context.Context, *connect.Request[v1.GetBlogRequest]) (*connect.Response[v1.BlogResponse], error)
}

// NewBlogServiceClient constructs a client for the blog.v1.BlogService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBlogServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BlogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &blogServiceClient{
		create: connect.NewClient[v1.CreateBlogRequest, v1.BlogResponse](
			httpClient,
			baseURL+BlogServiceCreateProcedure,
			opts...,
		),
		get: connect.NewClient[v1.GetBlogRequest, v1.BlogResponse](
			httpClient,
			baseURL+BlogServiceGetProcedure,
			opts...,
		),
	}
}

// blogServiceClient implements BlogServiceClient.
type blogServiceClient struct {
	create *connect.Client[v1.CreateBlogRequest, v1.BlogResponse]
	get    *connect.Client[v1.GetBlogRequest, v1.BlogResponse]
}

// Create calls blog.v1.BlogService.create.
func (c *blogServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateBlogRequest]) (*connect.Response[v1.BlogResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Get calls blog.v1.BlogService.get.
func (c *blogServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetBlogRequest]) (*connect.Response[v1.BlogResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// BlogServiceHandler is an implementation of the blog.v1.BlogService service.
type BlogServiceHandler interface {
	Create(context.Context, *connect.Request[v1.CreateBlogRequest]) (*connect.Response[v1.BlogResponse], error)
	Get(context.Context, *connect.Request[v1.GetBlogRequest]) (*connect.Response[v1.BlogResponse], error)
}

// NewBlogServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBlogServiceHandler(svc BlogServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	blogServiceCreateHandler := connect.NewUnaryHandler(
		BlogServiceCreateProcedure,
		svc.Create,
		opts...,
	)
	blogServiceGetHandler := connect.NewUnaryHandler(
		BlogServiceGetProcedure,
		svc.Get,
		opts...,
	)
	return "/blog.v1.BlogService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BlogServiceCreateProcedure:
			blogServiceCreateHandler.ServeHTTP(w, r)
		case BlogServiceGetProcedure:
			blogServiceGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBlogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBlogServiceHandler struct{}

func (UnimplementedBlogServiceHandler) Create(context.Context, *connect.Request[v1.CreateBlogRequest]) (*connect.Response[v1.BlogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blog.v1.BlogService.create is not implemented"))
}

func (UnimplementedBlogServiceHandler) Get(context.Context, *connect.Request[v1.GetBlogRequest]) (*connect.Response[v1.BlogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("blog.v1.BlogService.get is not implemented"))
}
