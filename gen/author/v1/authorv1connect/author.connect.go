// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: author/v1/author.proto

package authorv1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1 "github.com/Niket1997/blogger/gen/author/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// AuthorServiceName is the fully-qualified name of the AuthorService service.
	AuthorServiceName = "author.v1.AuthorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthorServiceCreateProcedure is the fully-qualified name of the AuthorService's create RPC.
	AuthorServiceCreateProcedure = "/author.v1.AuthorService/create"
	// AuthorServiceGetProcedure is the fully-qualified name of the AuthorService's get RPC.
	AuthorServiceGetProcedure = "/author.v1.AuthorService/get"
)

// AuthorServiceClient is a client for the author.v1.AuthorService service.
type AuthorServiceClient interface {
	Create(context.Context, *connect.Request[v1.CreateAuthorRequest]) (*connect.Response[v1.AuthorResponse], error)
	Get(context.Context, *connect.Request[v1.GetAuthorRequest]) (*connect.Response[v1.AuthorResponse], error)
}

// NewAuthorServiceClient constructs a client for the author.v1.AuthorService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authorServiceClient{
		create: connect.NewClient[v1.CreateAuthorRequest, v1.AuthorResponse](
			httpClient,
			baseURL+AuthorServiceCreateProcedure,
			opts...,
		),
		get: connect.NewClient[v1.GetAuthorRequest, v1.AuthorResponse](
			httpClient,
			baseURL+AuthorServiceGetProcedure,
			opts...,
		),
	}
}

// authorServiceClient implements AuthorServiceClient.
type authorServiceClient struct {
	create *connect.Client[v1.CreateAuthorRequest, v1.AuthorResponse]
	get    *connect.Client[v1.GetAuthorRequest, v1.AuthorResponse]
}

// Create calls author.v1.AuthorService.create.
func (c *authorServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateAuthorRequest]) (*connect.Response[v1.AuthorResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Get calls author.v1.AuthorService.get.
func (c *authorServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetAuthorRequest]) (*connect.Response[v1.AuthorResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// AuthorServiceHandler is an implementation of the author.v1.AuthorService service.
type AuthorServiceHandler interface {
	Create(context.Context, *connect.Request[v1.CreateAuthorRequest]) (*connect.Response[v1.AuthorResponse], error)
	Get(context.Context, *connect.Request[v1.GetAuthorRequest]) (*connect.Response[v1.AuthorResponse], error)
}

// NewAuthorServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthorServiceHandler(svc AuthorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authorServiceCreateHandler := connect.NewUnaryHandler(
		AuthorServiceCreateProcedure,
		svc.Create,
		opts...,
	)
	authorServiceGetHandler := connect.NewUnaryHandler(
		AuthorServiceGetProcedure,
		svc.Get,
		opts...,
	)
	return "/author.v1.AuthorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthorServiceCreateProcedure:
			authorServiceCreateHandler.ServeHTTP(w, r)
		case AuthorServiceGetProcedure:
			authorServiceGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthorServiceHandler struct{}

func (UnimplementedAuthorServiceHandler) Create(context.Context, *connect.Request[v1.CreateAuthorRequest]) (*connect.Response[v1.AuthorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("author.v1.AuthorService.create is not implemented"))
}

func (UnimplementedAuthorServiceHandler) Get(context.Context, *connect.Request[v1.GetAuthorRequest]) (*connect.Response[v1.AuthorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("author.v1.AuthorService.get is not implemented"))
}
